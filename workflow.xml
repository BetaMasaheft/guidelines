<?xml version="1.0" encoding="utf-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
<teiHeader>
  <fileDesc>
    <titleStmt>
    </titleStmt>
    <publicationStmt>
      <p></p>
          </publicationStmt>
    <sourceDesc>
      <p>Produced by pandoc.</p>
    </sourceDesc>
  </fileDesc>
</teiHeader>
<text>
<body>
<div type="level1">
  <head>Create a new record</head>
  <div type="level2">
    <head>from template</head>
    <p>Cataloguers may use one of the
    <ref target="https://github.com/SChAth/schema">annotated
    templates</ref> to create new data. ### in the preview app You shall
    now find a new &quot;create new entity&quot; function in the list
    view of the app. You only need to enter the name of the file, for
    manuscripts this is the full filename, for the other entities just
    the last part of the id . For LIT1234iliad, you would enter only
    &quot;iliad&quot;. For a manuscript, simply enter the full name, the
    small print will indicate you what is needed. As you start typing
    the button will become active and you can create the file. This is
    stored in the app, not in git! As the confirmation page tells you,
    you need to 1. download the file 2. save it in a folder called
    &quot;new&quot; into the proper folder 3. commit and sync to git</p>
    <p>Once you have done this git and our server will be again in sync,
    which means you can now move your file if you need to (especially
    for manuscripts) and then commit and sync this change again. If you
    omit the first step, we will have two identical files in two
    locations and thus the id lookup of the app will fail not showing
    you your file. On leaving the page you will get a warning every
    time, intended to make you stop before you carry on without syncing.
    The generated file will have a consistent new id and will insert it
    in the appropriate place in the file. This should avoid the really
    frequent problem of ids not being updated after copy-pasting a
    master file. it remains entirely possible to create your files in
    oXygen as previously, but this method is recommended as it makes
    sure your id is unique. The file will also have the correct type and
    a change element with your initials and current date, nothing
    else.</p>
  </div>
  <div type="level2">
    <head>after file preparation</head>
    <list type="ordered:arabic">
      <item n="3">
        <p>The file should be submitted for revision to a second author
        taking care of describing according to guidelines the event.</p>
        <list type="ordered:arabic">
          <item>
            <p>Cataloguer will enter a <seg type="code">change</seg>
            with content <hi rendition="simple:italic">Submitted for
            review</hi>, once she is finished.</p>
          </item>
          <item>
            <p>Reviewer will add a <seg type="code">change</seg> with
            content <hi rendition="simple:italic">Reviewed and
            Corrected</hi>,</p>
          </item>
          <item>
            <p>General editor will enter a <seg type="code">change</seg>
            with value <hi rendition="simple:italic">Approved</hi></p>
          </item>
        </list>
      </item>
      <item>
        <p>Files do not need to be moved at this stage. Once files are
        approved they will be pushed to the server</p>
      </item>
      <item>
        <p>Before upload files are transformed to add publication time
        data e.g. the exact date and time of publication</p>
      </item>
      <item>
        <p>Files needing editing after publication will be edited in the
        server directly. The server will contain only published and
        updated files.</p>
      </item>
    </list>
  </div>
</div>
<div type="level1">
  <head>batch editing files</head>
  <p>You can find and replace strings or regex patterns thourough the
  data in Oxygen for example. Please, make sure you - untick the option
  to create .bak files - in case you forget, and such files are created,
  please DO NOT commit them - before replacing all, you will be asked if
  you want to preview. this is always wise and gives you one more
  occasion to spot check your changes before performing the action</p>
  <p>In case you have anyway made a mistake remember that - before
  committing data you can review in Git desktop the changes and discard
  them if they are wrong. - if you have committed, pushed and you
  realize it was a big mistake, you can still revert your own commit</p>
</div>
<div type="level1">
  <head>keeping track</head>
  <p>To keep track of the workflow we use the google drive file linked
  above. PLEASE, note the guidelines for color coding. Use the tabs
  below to switch between categories each line in the file corresponds
  to a file in the corresponding GIThub Repo. https://github.com/SChAth
  * color the text in red if an entry has been added to the spreadsheet,
  but the file still needs to be created * color the text black and the
  cell yellow once the file has been created and is in repo * to submit
  a file for review color it purple * Alessandro should color green
  approved records * Pietro will make blue records already online. This
  will be subject to a different update workflow.</p>
</div>
</body>
</text>
</TEI>
